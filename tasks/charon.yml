---
- name: Check if cluster lock exists
  become: false
  ansible.builtin.stat:
    path: "/root/.charon/cluster-lock.json"
  register: cluster_lock

- name: Create Charon directory structure
  become: true
  ansible.builtin.file:
    path: "/root/.charon"
    owner: "root"
    group: "root"
    state: directory
    mode: "0777"
    recurse: true

- name: Copy private key to destination
  ansible.builtin.copy:
    content: "{{ host_charon_enr_private_key }}"
    dest: "/root/.charon/charon-enr-private-key"
    owner: "root"
    group: "root"
    mode: "0666"
  no_log: true
  when: host_charon_enr_private_key is defined

- name: Start/Restart the Charon client docker container
  community.docker.docker_container:
    image: "{{ charon_docker_image }}"
    keep_volumes: true
    name: "{{ charon_container_name }}"
    networks:
      - name: "eth-staking-network-net"
    networks_cli_compatible: true
    command: "run"
    env:
      CHARON_BEACON_NODE_ENDPOINTS: "http://{{ consensus_docker_container_name }}:{{ consensus_client_http_api_port }}"
      CHARON_LOG_LEVEL: "debug"
      CHARON_LOG_FORMAT: "console"
      CHARON_P2P_RELAYS: "{{ charon_relay_address }}"
      CHARON_P2P_TCP_ADDRESS: "0.0.0.0:{{ charon_p2p_tcp_port }}"
      CHARON_VALIDATOR_API_ADDRESS: "0.0.0.0:{{ charon_validator_api_port }}"
      CHARON_MONITORING_ADDRESS: "0.0.0.0:{{ charon_monitoring_port }}"
      CHARON_BUILDER_API: "false"
      CHARON_FEATURE_SET_ENABLE: "eager_double_linear,consensus_participate"
      CHARON_PRIVATE_KEY_FILE_LOCK: "true"
      CHARON_PRIVATE_KEY_FILE: "/opt/charon/charon-enr-private-key"
      CHARON_LOCK_FILE: "/opt/charon/cluster-lock.json"
    published_ports:
      - "{{ charon_p2p_tcp_port }}:{{ charon_p2p_tcp_port }}/tcp"
      - "{{ charon_validator_api_port }}:{{ charon_validator_api_port }}"
      - "127.0.0.1:{{ charon_monitoring_port }}:{{ charon_monitoring_port }}"
    restart_policy: always
    state: started
    volumes:
      - "/root/.charon:/opt/charon:rw"
    healthcheck:
      test: wget -qO- http://localhost:{{ charon_monitoring_port }}/readyz
  when: cluster_lock.stat.exists
