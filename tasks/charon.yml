---
- name: Check if cluster definition exists
  become: false
  ansible.builtin.stat:
    path: "/root/.charon/cluster-definition.json"
  register: cluster_definition_exists

- name: Check if cluster lock exists
  become: false
  ansible.builtin.stat:
    path: "/root/.charon/cluster-lock.json"
  register: cluster_lock

- name: Create Charon directory structure
  become: true
  ansible.builtin.file:
    path: "/root/.charon"
    owner: "root"
    group: "root"
    state: directory
    mode: "0777"
    recurse: true

- name: Copy private key to destination
  ansible.builtin.copy:
    content: "{{ host_charon_enr_private_key }}"
    dest: "/root/.charon/charon-enr-private-key"
    owner: "root"
    group: "root"
    mode: "0666"
  no_log: true
  when: host_charon_enr_private_key is defined

- name: Copy cluster definition
  ansible.builtin.copy:
    content: "{{ lookup('file', 'cluster-definition.json') }}"
    dest: "/root/.charon/cluster-definition.json"
    owner: "root"
    group: "root"
    mode: "0666"
    force: true
  register: cluster_def_copy

- name: Start/Restart the Charon client docker container
  community.general.docker_container:
    image: "{{ charon_docker_image }}"
    keep_volumes: true
    name: "{{ charon_container_name }}"
    network_mode: bridge
    networks:
      - name: "eth-staking-network-net"
    command: >
      run
      --beacon-node-endpoints http://{{ consensus_docker_container_name }}:{{ consensus_client_http_api_port }}
      --beacon-node-timeout 10s
      --beacon-node-submit-timeout 10s
      --p2p-tcp-address 0.0.0.0:{{ charon_p2p_tcp_port }}
      --validator-api-address 0.0.0.0:{{ charon_validator_api_port }}
      --monitoring-address 0.0.0.0:{{ charon_monitoring_port }}
      --p2p-relays {{ charon_relay_address }}
      --log-level info
      --log-format console
      --log-color auto
      --builder-api false
      --private-key-file-lock false
      --private-key-file /opt/charon/charon-enr-private-key
      --lock-file /opt/charon/cluster-lock.json
      --p2p-external-hostname {{ inventory_hostname }}
      --p2p-external-ip {{ ansible_default_ipv4.address }}
    published_ports:
      - "{{ charon_p2p_tcp_port }}:{{ charon_p2p_tcp_port }}"
      - 127.0.0.1:{{ charon_monitoring_port }}:{{ charon_monitoring_port }}
    restart_policy: always
    state: started
    volumes:
      - "/root/.charon:/opt/charon:rw"
  when: cluster_definition_exists.stat.exists and cluster_lock.stat.exists
