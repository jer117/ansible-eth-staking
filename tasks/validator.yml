---
- name: Create directory structure for validator client
  become_user: "root"
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "root"
    group: "root"
    mode: "0755"
  with_items:
    - "/root/.charon/validator_keys"
    - "{{ validator_keys_mount }}/keys"
    - "{{ validator_keys_mount }}/passwords"
    - "{{ validator_data_mount }}"

- name: Copy validator keystores
  become: true
  ansible.builtin.copy:
    content: "{{ item.keystore_content | default(omit) }}"
    src: "{{ item.keystore_file | default(omit) }}"
    dest: "{{ validator_keys_mount }}/keys/{{ item.keystore_file | basename }}"
    owner: "root"
    group: "root"
    mode: "0600"
  with_items: "{{ validators }}"
  when: validators is defined and charon_enabled == 'false'

- name: Copy validator keystore passwords
  become: true
  ansible.builtin.copy:
    content: "{{ item.password_content | default(omit) }}"
    src: "{{ item.password_file | default(omit) }}"
    dest: "{{ validator_keys_mount }}/passwords/{{ (item.keystore_file | basename) | replace('.json', '.txt') }}"
    owner: "root"
    group: "root"
    mode: "0600"
  with_items: "{{ validators }}"
  when: validators is defined and charon_enabled == 'false'

- name: Create validator definition file
  become: true
  ansible.builtin.template:
    src: templates/validator_definitions.yml.j2
    dest: "/root/.charon/validator_keys/validator_definitions.yml"
    owner: "root"
    group: "root"
    mode: "0600"
    force: true
  when: charon_enabled == 'true' and host_validator_public_key is defined

- name: Create validator_definitions.yml
  become: true
  ansible.builtin.template:
    src: templates/validator_definitions.yml.j2
    dest: "{{ validator_keys_mount }}/keys/validator_definitions.yml"
    owner: "root"
    group: "root"
    mode: "0600"
  when: keystore_file is defined

- name: Import validator keystores into Lighthouse
  become: true
  community.docker.docker_container:
    image: "{{ lighthouse_image }}"
    name: "lighthouse-import-{{ ansible_date_time.epoch }}"
    command: >
      lighthouse vc import
      --network {{ network }}
      --datadir /data
      --keystores /validators/keys/{{ keystore_file }}
      --password-file /validators/passwords/{{ keystore_file | replace('.json', '.txt') }}
    volumes:
      - "{{ validator_data_mount }}:/data"
      - "{{ validator_keys_mount }}/keys:/validators/keys"
      - "{{ validator_keys_mount }}/passwords:/validators/passwords"
    state: started
    auto_remove: true
  when: keystore_file is defined and charon_enabled == 'false'
  register: import_result
  failed_when: import_result.ansible_facts.docker_container.State.ExitCode != 0

# Set docker ports
- name: Set validator docker ports
  ansible.builtin.set_fact:
    validator_published_ports: "{{ validator_published_ports }}"

- name: Start/Restart the validator client docker container (with MEV boost)
  become_user: root
  become: true
  community.docker.docker_container:
    image: "{{ lighthouse_image }}"
    keep_volumes: true
    name: "{{ validator_container_name }}"
    networks:
      - name: "eth-staking-network-net"
    networks_cli_compatible: true
    published_ports: "{{ validator_published_ports }}"
    restart: true
    restart_policy: unless-stopped
    state: started
    volumes: 
      - "/root/.charon/validator_keys:/root/.lighthouse/{{ network }}/validators:rw"
    command: >
      lighthouse vc
      --beacon-nodes http://{{ charon_container_name }}:{{ charon_validator_api_port }}
      --suggested-fee-recipient {{ withdrawal_account_address }}
      --init-slashing-protection
      --http
      --http-address 0.0.0.0
      --unencrypted-http-transport
      --http-port {{ validator_client_http_api_port }}
      --http-allow-origin "*"
      --metrics
      --metrics-address 0.0.0.0
      --metrics-port {{ validator_monitoring_port }}
      --network {{ network }}
      --use-long-timeouts
      --disable-auto-discover
      --distributed
      --enable-doppelganger-protection
      --builder-proposals
  when: charon_enabled == 'true' and mev_boost_enabled == 'true'

- name: Start/Restart the validator client docker container (without MEV boost)
  become_user: root
  become: true
  community.docker.docker_container:
    image: "{{ lighthouse_image }}"
    keep_volumes: true
    name: "{{ validator_container_name }}"
    networks:
      - name: "eth-staking-network-net"
    networks_cli_compatible: true
    published_ports: "{{ validator_published_ports }}"
    restart: true
    restart_policy: unless-stopped
    state: started
    volumes: 
      - "/root/.charon/validator_keys:/root/.lighthouse/{{ network }}/validators:rw"
    command: >
      lighthouse vc
      --beacon-nodes http://{{ charon_container_name }}:{{ charon_validator_api_port }}
      --suggested-fee-recipient {{ withdrawal_account_address }}
      --init-slashing-protection
      --http
      --http-address 0.0.0.0
      --unencrypted-http-transport
      --http-port {{ validator_client_http_api_port }}
      --http-allow-origin "*"
      --metrics
      --metrics-address 0.0.0.0
      --metrics-port {{ validator_monitoring_port }}
      --network {{ network }}
      --use-long-timeouts
      --disable-auto-discover
      --distributed
      --enable-doppelganger-protection
      --builder-proposals
  when: charon_enabled == 'true' and mev_boost_enabled == 'false'

- name: Start/Restart the validator client docker container
  become_user: root
  become: true
  community.docker.docker_container:
    image: "{{ lighthouse_image }}"
    keep_volumes: true
    name: "{{ validator_container_name }}"
    networks:
      - name: "eth-staking-network-net"
    networks_cli_compatible: true
    published_ports: "{{ validator_published_ports }}"
    restart: true
    restart_policy: unless-stopped
    state: started
    volumes: >-
      - {{ validator_keys_mount }}:/validator_keys
      - {{ validator_keys_mount }}/passwords:/validators/passwords
      - {{ validator_data_mount }}:/data
    command: >
      lighthouse vc
      --beacon-nodes http://{{ consensus_docker_container_name }}:{{ consensus_client_http_api_port }}
      --validators-dir /validators/keys
      --secrets-dir /validators/passwords
      --suggested-fee-recipient {{ withdrawal_account_address }}
      --init-slashing-protection
      --http
      --http-address 0.0.0.0
      --unencrypted-http-transport
      --http-port {{ validator_client_http_api_port }}
      --http-allow-origin "*"
      --metrics
      --metrics-address 0.0.0.0
      --metrics-port {{ validator_monitoring_port }}
      --network {{ network }}
      --disable-auto-discover
      {% endif %} 
  when: charon_enabled == 'false'